{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = [\"value\", \"placeholder\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"input\", {\n    class: \"input\",\n    value: $data.local,\n    onInput: _cache[0] || (_cache[0] = (...args) => $options.onInput && $options.onInput(...args)),\n    placeholder: $props.placeholder\n  }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_1);\n}","map":{"version":3,"names":["_createElementBlock","class","value","$data","local","onInput","_cache","args","$options","placeholder","$props"],"sources":["/home/cracken/project/p2p-video-accelerator/viewer/p2p-video-viewer/frontend/src/components/NumberInput.vue"],"sourcesContent":["<template>\n  <input class=\"input\" :value=\"local\" @input=\"onInput\" :placeholder=\"placeholder\" />\n</template>\n\n<script>\nexport default {\n  name: 'NumberInput',\n  props: { modelValue: [Number, String], placeholder: String, integer: Boolean },\n  emits: ['update:modelValue'],\n  data() { return { local: this.modelValue } },\n  watch: { modelValue(v){ this.local = v } },\n  methods: {\n    onInput(e){\n      const val = e.target.value\n      const re = this.integer ? /^\\d*$/ : /^\\d*(?:\\.\\d*)?$/\n      if (val === '' || re.test(val)) {\n        this.local = val\n        const num = val === '' ? '' : (this.integer ? parseInt(val || '0') : parseFloat(val || '0'))\n        this.$emit('update:modelValue', isNaN(num) ? '' : num)\n      } else {\n        e.target.value = this.local\n      }\n    }\n  }\n}\n</script>\n"],"mappings":";;;uBACEA,mBAAA,CAAkF;IAA3EC,KAAK,EAAC,OAAO;IAAEC,KAAK,EAAEC,KAAA,CAAAC,KAAK;IAAGC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAH,OAAA,IAAAG,QAAA,CAAAH,OAAA,IAAAE,IAAA,CAAO;IAAGE,WAAW,EAAEC,MAAA,CAAAD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}